import stripe
import logging
from common.logging.error.error import Error
from common.logging.log_utils import START_OF_METHOD, END_OF_METHOD
from common.logging.error.error_messages import INTERNAL_SERVICE_ERROR
from backend.db.model.query.sql_statements import (UPDATE_IS_PAID_STATUS_OF_CUSTOMER,
                                                   UPDATE_SUBSCRIPTION_TABLE_UPON_PAYMENT_COMPLETION)


class UpdatePaymentStatusService:
    def __init__(self, hp_ai_db_connection_pool, customer_authentication_service, webhook_secret):
        self.pool = hp_ai_db_connection_pool.pool
        self.customer_authentication_service = customer_authentication_service
        self.webhook_secret = webhook_secret

    def perform_webhook_verification(self, request):
        """

        :param request:
        :return:
        """
        logging.info(START_OF_METHOD)
        payload = request.data
        sig_header = request.headers.get("Stripe-Signature")
        event = self.validate_and_construct_event(
            payload=payload,
            sig_header=sig_header,
            webhook_secret=self.webhook_secret)
        logging.info(END_OF_METHOD)
        return event

    def update_payment_status_from_event(self, event):
        """
        Updates the payment status of a customer leveraging the userId passed in the sessionId generated by Stripe
        :param event: The id of a session generated by Stripe checkout
        :return: python dict, a JWT
        """
        logging.info(START_OF_METHOD)
        event_type = event['type']
        if event_type == "checkout.session.completed":
            session = event['data']['object']
            stripe_customer_id = session.get("customer")
            subscription_id = session.get("subscription")
            user_id = session.metadata.get("userId")
            cnx = self.obtain_connection()
            put_record_status = self.execute_update_statement_for_customer(
                cnx=cnx,
                user_id=user_id,
                stripe_customer_id=stripe_customer_id)
            put_subscription_status = self.execute_update_statement_for_subscriptions_table(
                cnx=cnx,
                user_id=user_id,
                subscription_id=subscription_id)
            valid_jwt_token, email = self.customer_authentication_service.generate_valid_jwt_token_after_payment(
                cnx=cnx,
                user_id=user_id)
            cnx.close()
            response = {"token": valid_jwt_token,
                        "user": {"id": user_id,
                                 "email": email},
                        "putRecordStatus": put_record_status,
                        "putSubscriptionStatus": put_subscription_status}
            logging.info(END_OF_METHOD)
            return response
        else:
            logging.info(f'Unhandled event type: {event_type}')
            response = {'status': 'success'}
            return response

    @staticmethod
    def execute_update_statement_for_customer(cnx, user_id, stripe_customer_id):
        """
        Updates the is_paid status of a customer in our system
        :param cnx: The connection to our pool
        :param user_id: The internal identifier of a customer in our system
        :param stripe_customer_id: The customerId for a stripe user
        :return: python int
        """
        logging.info(START_OF_METHOD)
        try:
            cursor = cnx.cursor()
            cursor.execute(UPDATE_IS_PAID_STATUS_OF_CUSTOMER, [stripe_customer_id, user_id])
            cnx.commit()
            cursor.close()
            put_record_status = 200
            logging.info(END_OF_METHOD)
            return put_record_status
        except Exception as e:
            logging.error('An issue occurred updating the paid status in our database. Please try again.',
                          exc_info=True,
                          extra={'information': {'error': str(e)}})
            raise Error(INTERNAL_SERVICE_ERROR)

    @staticmethod
    def execute_update_statement_for_subscriptions_table(cnx, user_id, subscription_id):
        """
        Updates the subscription table
        :param cnx: The MySQLConnectionPool
        :param user_id: The internal id of a customer
        :param subscription_id: The subscription id of a customer
        :return: python int
        """
        logging.info(START_OF_METHOD)
        try:
            cursor = cnx.cursor()
            cursor.execute(UPDATE_SUBSCRIPTION_TABLE_UPON_PAYMENT_COMPLETION, [subscription_id, user_id])
            cnx.commit()
            cursor.close()
            put_record_status = 200
            logging.info(END_OF_METHOD)
            return put_record_status
        except Exception as e:
            logging.error('An issue occurred updating the subscriptions table')
            raise Error(INTERNAL_SERVICE_ERROR)

    @staticmethod
    def validate_and_construct_event(payload, sig_header, webhook_secret):
        """

        :param payload:
        :param sig_header:
        :param webhook_secret:
        :return:
        """
        logging.info(START_OF_METHOD)
        try:
            event = stripe.Webhook.construct_event(
                payload, sig_header, webhook_secret
            )
            logging.info(END_OF_METHOD)
            return event
        except Exception as e:
            logging.error('There was an issue validating the webhook signature from Stripe',
                          exc_info=True,
                          extra={'information': {'error': str(e)}})
            raise Error(INTERNAL_SERVICE_ERROR)

    def obtain_connection(self):
        try:
            cnx = self.pool.get_connection()
            return cnx
        except Exception as e:
            logging.error('An issue occurred acquiring a connection to the pool',
                          exc_info=True,
                          extra={'information': {'error': str(e)}})
            raise Error(INTERNAL_SERVICE_ERROR)
