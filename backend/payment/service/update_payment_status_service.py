import logging
from common.logging.log_utils import START_OF_METHOD, END_OF_METHOD
from common.logging.error.error import Error
from common.logging.error.error_messages import INTERNAL_SERVICE_ERROR
from backend.db.model.query.sql_statements import UPDATE_IS_PAID_STATUS_OF_CUSTOMER
import stripe


class UpdatePaymentStatusService:
    def __init__(self, hp_ai_db_connection_pool, customer_authentication_service):
        self.pool = hp_ai_db_connection_pool.pool
        self.customer_authentication_service = customer_authentication_service

    def update_payment_status_request(self, session_id):
        """
        Updates the payment status of a customer leveraging the userId passed in the sessionId generated by Stripe
        :param session_id: The id of a session generated by Stripe checkout
        :return: python dict, a JWT
        """
        logging.info(START_OF_METHOD)
        session = stripe.checkout.Session.retrieve(session_id)
        user_id = session.metadata.get("userId")
        cnx = self.obtain_connection()
        put_record_status = self.execute_update_statement_for_customer(
            cnx=cnx,
            user_id=user_id)
        valid_jwt_token, email = self.customer_authentication_service.generate_valid_jwt_token_after_payment(
            cnx=cnx,
            user_id=user_id)
        cnx.close()
        response = {"token": valid_jwt_token,
                    "user": {"id": user_id,
                             "email": email},
                    "pustRecordStatus": put_record_status}
        logging.info(END_OF_METHOD)
        return response

    @staticmethod
    def execute_update_statement_for_customer(cnx, user_id):
        """
        Updates the is_paid status of a customer in our system
        :param cnx: The connection to our pool
        :param user_id: The internal identifier of a customer in our system
        :return: python int
        """
        logging.info(START_OF_METHOD)
        try:
            cursor = cnx.cursor()
            cursor.execute(UPDATE_IS_PAID_STATUS_OF_CUSTOMER, [user_id])
            cnx.commit()
            cursor.close()
            put_record_status = 200
            logging.info(END_OF_METHOD)
            return put_record_status
        except Exception as e:
            logging.error('An issue occurred updating the paid status in our database. Please try again.',
                          exc_info=True,
                          extra={'information': {'error': str(e)}})
            raise Error(INTERNAL_SERVICE_ERROR)

    def obtain_connection(self):
        try:
            cnx = self.pool.get_connection()
            return cnx
        except Exception as e:
            logging.error('An issue occurred acquiring a connection to the pool',
                          exc_info=True,
                          extra={'information': {'error': str(e)}})
            raise Error(INTERNAL_SERVICE_ERROR)
